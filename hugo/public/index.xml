<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aashray&#39;s Blog</title>
    <link>/</link>
    <description>Recent content on Aashray&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 29 Dec 2021 11:17:20 -0800</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Sum Types and Null in Rust</title>
      <link>/posts/sum-types-and-null-in-rust/</link>
      <pubDate>Wed, 29 Dec 2021 11:17:20 -0800</pubDate>
      
      <guid>/posts/sum-types-and-null-in-rust/</guid>
      <description>Sum types are definitely a step in a different direction for rust from C-style languages. They let you define an enumeration of types, and then create instance of these enumerations which are one of the set of types they specify. See an example below (of a binary search tree definition)
pub enum Tree&amp;lt;T&amp;gt; { TreeNode(T, Box&amp;lt;TreeNode&amp;lt;T&amp;gt;&amp;gt;, Box&amp;lt;TreeNode&amp;lt;T&amp;gt;&amp;gt;), Nil }  What we see here is an example of using an enum to indicate that an instance of a Tree can take on one of a set of fixed types, either a TreeNode, or Nil.</description>
    </item>
    
    <item>
      <title>What Developers Can Learn From Water Heaters</title>
      <link>/posts/what-developers-can-learn-from-water-heaters/</link>
      <pubDate>Wed, 10 Nov 2021 10:17:53 -0800</pubDate>
      
      <guid>/posts/what-developers-can-learn-from-water-heaters/</guid>
      <description>I’ve never really understood how a water heater works. It may sound dumb, but it’s the truth.
I know that I have a water heater, I know that I pay a utilities bill for my water heater, and I know that I can rest assured at night that when I shower it will be with hot water, but how that happens has never been something I’ve known or thought much about.</description>
    </item>
    
    <item>
      <title>Let&#39;s Build a Router Part 2</title>
      <link>/posts/lets-build-a-router-part-2/</link>
      <pubDate>Mon, 08 Nov 2021 08:40:29 -0800</pubDate>
      
      <guid>/posts/lets-build-a-router-part-2/</guid>
      <description>Welcome back! If you followed part 1 of this series, then we’ll be answering a lot of the questions you may have had from last time, and if not, I’d highly suggest reading part 1 before we continue our journey to building a router.
To recap, we’ve set up our 3 virtual networks, and we’ve configured a router with one network adapter connected to the switches of each private network, and a 4th network adapter connected to a switch shared with our host machine’ network adapter, thus exposing Internet access to our router.</description>
    </item>
    
    <item>
      <title>Let&#39;s Build A Router Part 1</title>
      <link>/posts/lets-build-a-router-part-1/</link>
      <pubDate>Sun, 31 Oct 2021 17:15:06 -0700</pubDate>
      
      <guid>/posts/lets-build-a-router-part-1/</guid>
      <description>Today I’m going to describe the first steps of how I set up a virtual router, to connect multiple private local access networks of virtual machines together, and eventually, to the Internet.
Obviously, we first need to understand, what is a router? It’s something we all have in our homes, but in the eyes of most, is just a magical tunnel to the Internet.
A router is really just a computer, which is specially configured to enable a set of devices to use a shared connection to the public internet (e.</description>
    </item>
    
  </channel>
</rss>
